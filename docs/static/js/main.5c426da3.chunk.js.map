{"version":3,"sources":["game/constants.js","game/engine.js","game/scenes/detail.js","game/scenes/slots.js","game/utils.js","game/index.ts","components/constants.ts","screens/Admin.tsx","components/ConnectSample.tsx","components/QuerySample.tsx","components/TxSample.tsx","components/About.tsx","components/HowToPlay.tsx","screens/Main.tsx","screens/Market.tsx","screens/DogDetail.tsx","constants.ts","screens/DogSquad.tsx","screens/Slots.tsx","components/TokenBalance.tsx","index.tsx"],"names":["CONTAINER_CSS_SELECTOR","GAME_TITLE","WIDTH","HEIGHT","ACCESSORY_SPRITE","DOG_SPRITE","k","kaboom","clearColor","canvas","document","getElementById","width","height","loadSprite","loadSound","detail","add","text","origin","pos","dog","getData","name","sprite","class","accessories","accessory","scale","Math","random","floor","SLOT_REEL_ITEM_SPRITE_IDS","SLOT_REEL_ITEM_TOP","length","SLOT_REEL_ITEM_SPEEDS","SLOT_REEL_ITEM_SPIN_DELAYS","randomDelay","makeReel","tag","left","spriteIds","items","shuffled","i","j","temp","shuffle","vec2","map","spriteId","index","moveReelItem","speed","reelItem","y","move","slots","spinInProgress","layers","layer","SLOT_REEL_ITEM_LEFT","action","mouseIsClicked","finishedSpinCallback","reelCancels","reelDelays","wait","push","musicSpin","play","loop","_pawsinthepark_execute_spin","volume","stop","musicWinner","spin","rect","color","hideGame","element","querySelector","style","visibility","go","showGame","scene","setGameData","key","data","setData","CONTRACT_ADDRESS","MintStatus","Admin","useEffect","connectedWallet","useConnectedWallet","lcd","useMemo","LCDClient","URL","network","chainID","mintStatus","setMintStatus","useState","NotInProgress","mintAmount","setMintAmount","type","value","onChange","e","target","onClick","InProgress","tx","msgs","MsgExecuteContract","walletAddress","mint","amount","uluna","fee","StdFee","post","then","nextTxResult","console","log","catch","error","Error","executeMint","disabled","transfer","recipient","executeTransfer","ConnectSample","status","wallets","availableConnectTypes","availableInstallTypes","connect","install","disconnect","useWallet","JSON","stringify","WalletStatus","WALLET_NOT_CONNECTED","connectType","WALLET_CONNECTED","QuerySample","bank","setBank","balance","coins","toString","toAddress","TxSample","txResult","setTxResult","txError","setTxError","send","useCallback","startsWith","MsgSend","uusd","UserDenied","CreateTxFailed","message","TxFailed","Timeout","TxUnspecifiedError","String","alert","availablePost","About","HowToPlay","Main","Market","listings","setListings","wasm","contractQuery","result","listing","id","listed_by_address","dog_id","price_in_uusd","buy_dog_on_market","executeBuyDogOnMarket","price","parseFloat","DogDetail","dogId","useParams","setDog","setAccessories","dogs","find","ACCESSORY_IMAGE","DOG_IMAGE","DOG_CLASS_NAME","DOG_ATTR_NAME","DogSquad","setDogs","executeSellDogOnMarket","sell_dog_on_market","className","to","src","attr1","attr2","attr3","attr4","Slots","callback","spin_the_wheel","TokenBalance","setBalance","ustBalance","setUstBalance","get","testnet","walletConnectChainIds","ReactDOM","render","defaultNetwork","path"],"mappings":"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","file":"static/js/main.5c426da3.chunk.js","sourcesContent":["export const CONTAINER_CSS_SELECTOR = \"#game_container\";\nexport const GAME_TITLE = \"Paws in the Park\";\nexport const WIDTH = 900;\nexport const HEIGHT = 900;\nexport const SLOTS_TITLE = \"Spin The Paw\";\n\nexport const ACCESSORY_SPRITE = {\n  \"martini glass\": \"accessory-martini\",\n  \"sparkle\": \"accessory-sparkle\",\n  \"star\": \"accessory-rainbow-star\",\n};\n\nexport const DOG_SPRITE = {\n  0: \"dog01\",\n  1: \"dog02\",\n  2: \"dog06\",\n  3: \"dog04\",\n  4: \"dog05\",\n  5: \"dog07\",\n  6: \"dog03\",\n};\n","import kaboom from \"../../node_modules/kaboom/dist/kaboom.mjs\";\nimport { WIDTH, HEIGHT } from \"./constants\";\n\nconst k = kaboom({\n  clearColor: [0.1, 0.1, 0.2, 1],\n  canvas: document.getElementById(\"game\"),\n  width: WIDTH,\n  height: HEIGHT\n});\n\nk.loadSprite(\"reel\", \"/assets/reel.png\");\nk.loadSprite(\"frame\", \"/assets/frame.png\");\nk.loadSprite(\"dog01\", \"/assets/dog01.png\");\nk.loadSprite(\"dog02\", \"/assets/dog02.png\");\nk.loadSprite(\"dog03\", \"/assets/dog03.png\");\nk.loadSprite(\"dog04\", \"/assets/dog04.png\");\nk.loadSprite(\"dog05\", \"/assets/dog05.png\");\nk.loadSprite(\"dog06\", \"/assets/dog06.png\");\nk.loadSprite(\"dog07\", \"/assets/dog07.png\");\nk.loadSprite(\"accessory-martini\", \"/assets/accessory-martini.png\");\nk.loadSprite(\"accessory-sparkle\", \"/assets/accessory-sparkle.png\");\nk.loadSprite(\"accessory-rainbow-star\", \"/assets/accessory-rainbow-star.png\");\n\n\nk.loadSound(\"spin\", \"/assets/spin.mp3\");\nk.loadSound(\"winner\", \"/assets/winner.mp3\");\nk.loadSound(\"dogdetail\", \"/assets/dogdetail.mp3\");\n\nexport default k;\n","import k from \"../engine\";\nimport {GAME_TITLE, WIDTH, HEIGHT, ACCESSORY_SPRITE, DOG_SPRITE} from \"../constants\";\n\nconst detail = () => {\n  k.add([\n    k.text(GAME_TITLE, 32),\n    k.origin(\"center\"),\n    k.pos(WIDTH / 2, HEIGHT / 10),\n    \"title\",\n  ]);\n  const dog = k.getData(\"dog\");\n  k.add([\n    k.text(dog.name),\n    k.origin(\"center\"),\n    k.pos(WIDTH / 2, HEIGHT / 6),\n  ]);\n  k.add([\n    k.sprite(DOG_SPRITE[dog.class]),\n    k.origin(\"center\"),\n    k.pos(WIDTH / 2, HEIGHT / 2),\n  ]);\n  const accessories = k.getData(\"accessories\");\n  for (let accessory of accessories) {\n    k.add([\n      k.sprite(ACCESSORY_SPRITE[accessory.name]),\n      k.origin(\"center\"),\n      k.scale(Math.random() * 0.7 + 0.1),\n      k.pos(\n        Math.floor(Math.random() * (WIDTH * 0.9) + (WIDTH * 0.1)),\n        Math.floor(Math.random() * (HEIGHT * 0.7) + (HEIGHT * 0.2)),\n      ),\n      accessory.name,\n    ]);\n  }\n};\n\nexport default detail;\n","import k from \"../engine\";\nimport {WIDTH, HEIGHT, SLOTS_TITLE} from \"../constants\";\nimport {shuffle} from \"../utils\";\n\nconst SLOT_REEL_SCALE = 0.7;\nconst SLOT_REEL_TOP = HEIGHT * 0.1;\n\nconst SLOT_REEL_ITEM_SPRITE_IDS = [\"dog01\", \"dog02\", \"dog03\", \"dog04\", \"dog05\"];\nconst SLOT_REEL_ITEM_TOP = SLOT_REEL_ITEM_SPRITE_IDS.length * -100;\nconst SLOT_REEL_ITEM_LEFT = 10;\nconst SLOT_REEL_ITEM_HORIZONTAL_GUTTER = 300;\nconst SLOT_REEL_ITEM_VERTICAL_GUTTER = 24;\nconst SLOT_REEL_ITEM_OFFSET = 330 * SLOT_REEL_SCALE;\nconst SLOT_REEL_ITEM_SPEEDS = [350, 400, 500];\n// time in milliseconds\nconst SLOT_REEL_ITEM_SPIN_DELAYS = [0, 50, 100, 200, 300, 400];\n\nconst SLOT_BAR_HEIGHT = 128;\nconst SLOT_BAR_HEADER_TOP = 0;\nconst SLOT_BAR_FOOTER_TOP = HEIGHT - SLOT_BAR_HEIGHT;\n\nconst randomSpeed = () => (SLOT_REEL_ITEM_SPEEDS[Math.floor(Math.random() * SLOT_REEL_ITEM_SPEEDS.length)]);\n// time in seconds\nconst randomDelay = () => (\n  SLOT_REEL_ITEM_SPIN_DELAYS[Math.floor((Math.random() * SLOT_REEL_ITEM_SPIN_DELAYS.length))] / 1000.0\n);\n\nconst makeReel = (tag, left) => {\n  const spriteIds = shuffle(SLOT_REEL_ITEM_SPRITE_IDS);\n  k.add([\n    k.sprite(\"reel\"),\n    k.pos(left, SLOT_REEL_TOP),\n    k.scale(k.vec2(SLOT_REEL_SCALE, 2.3)),\n    \"reel-background\",\n  ]);\n  return spriteIds.map((spriteId, index) => {\n    return k.add([\n      k.sprite(spriteId),\n      k.pos(left, SLOT_REEL_ITEM_TOP + (SLOT_REEL_ITEM_OFFSET * index) + (index === 0 ? 0 : SLOT_REEL_ITEM_VERTICAL_GUTTER * index)),\n      k.scale(SLOT_REEL_SCALE),\n      tag\n    ]);\n  });\n}\n\nconst moveReelItem = () => {\n  const speed = randomSpeed();\n  return (reelItem) => {\n    if (reelItem.pos.y > SLOT_BAR_FOOTER_TOP) {\n      reelItem.pos.y = SLOT_REEL_ITEM_TOP;\n    }\n    reelItem.move(0, speed);\n  };\n};\n\nconst makeWinnerFrames = () => {\n  k.add([\n    k.sprite(\"frame\"),\n    k.pos(SLOT_REEL_ITEM_LEFT, WIDTH * 0.4),\n    k.scale(0.65),\n    k.layer(\"winner\")\n  ]);\n  k.add([\n    k.sprite(\"frame\"),\n    k.pos(SLOT_REEL_ITEM_LEFT + SLOT_REEL_ITEM_HORIZONTAL_GUTTER, WIDTH * 0.4),\n    k.scale(0.65),\n    k.layer(\"winner\")\n  ]);\n}\n\nconst spin = (finishedSpinCallback) => {\n  let reelCancels = [];\n  let reelDelays = [\n    randomDelay(),\n    randomDelay(),\n    randomDelay(),\n  ];\n  k.wait(reelDelays[0], () => {\n    reelCancels.push(k.action(\"column-1\", moveReelItem()));\n  });\n  k.wait(reelDelays[1], () => {\n    reelCancels.push(k.action(\"column-2\", moveReelItem()));\n  });\n  k.wait(reelDelays[2], () => {\n    reelCancels.push(k.action(\"column-3\", moveReelItem()));\n  });\n  const musicSpin = k.play(\"spin\", {\n    loop: true,\n  });\n  k.wait(3, () => {\n    document._pawsinthepark_execute_spin(function() {\n      musicSpin.volume(1.5);\n      k.wait(1, () => {\n        for (let i = 0; i < reelDelays.length; i += 1) {\n          reelCancels[i]();\n        }\n        musicSpin.stop();\n        const musicWinner = k.play(\"winner\", { loop: true });\n        k.wait(10, () => {\n          musicWinner.stop();\n          finishedSpinCallback();\n        });\n      });\n    });\n  });\n}\n\nconst slots = () => {\n  let spinInProgress = false;\n  k.layers([\n    \"background\",\n    \"obj\",\n    \"winner\",\n    \"ui\"\n  ], \"obj\");\n  makeWinnerFrames();\n  const reelItems = [\n    makeReel(\"column-1\", SLOT_REEL_ITEM_LEFT),\n    makeReel(\"column-2\", SLOT_REEL_ITEM_LEFT + SLOT_REEL_ITEM_HORIZONTAL_GUTTER),\n    makeReel(\"column-3\",SLOT_REEL_ITEM_LEFT + (SLOT_REEL_ITEM_HORIZONTAL_GUTTER * 2))\n  ];\n\n  k.action(() => {\n    if (!spinInProgress && k.mouseIsClicked()) {\n      spinInProgress = true;\n      spin(() => {\n        spinInProgress = false;\n      });\n    }\n  });\n\n  k.add([\n    k.rect(WIDTH, SLOT_BAR_HEIGHT),\n    k.pos(0, SLOT_BAR_HEADER_TOP),\n    k.color(0.1, 0.1, 0.2),\n    k.layer(\"ui\")\n  ]);\n\n  k.add([\n    k.rect(WIDTH, SLOT_BAR_HEIGHT),\n    k.pos(0, SLOT_BAR_FOOTER_TOP),\n    k.color(0.1, 0.1, 0.2),\n    k.layer(\"ui\")\n  ]);\n\n  k.add([\n    k.text(SLOTS_TITLE, 32),\n    k.origin(\"center\"),\n    k.pos(WIDTH / 2, 32),\n    \"title\",\n    k.layer(\"ui\")\n  ]);\n};\n\nexport default slots;\n","export function shuffle(items) {\n  const shuffled = [...items];\n  for (let i = 0; i < shuffled.length; i += 1) {\n    const j = Math.floor(Math.random() * shuffled.length);\n    const temp = shuffled[i];\n    shuffled[i] = shuffled[j];\n    shuffled[j] = temp;\n  }\n  return shuffled;\n}\n","import k from \"./engine\";\n\nimport { CONTAINER_CSS_SELECTOR } from \"./constants\";\nimport detail from \"./scenes/detail\";\nimport slots from \"./scenes/slots\";\n\ntype Scene = \"detail\" | \"slots\";\n\nk.scene(\"empty\", () => {});\nk.scene(\"detail\", detail);\nk.scene(\"slots\", slots);\n\nexport function hideGame() {\n  const element: any = document.querySelector(CONTAINER_CSS_SELECTOR);\n  if (element) {\n    element.style.visibility = \"hidden\";\n    k.go(\"empty\");\n  }\n}\n\nexport function showGame(scene: Scene) {\n  const element: any = document.querySelector(CONTAINER_CSS_SELECTOR);\n  if (element) {\n    element.style.visibility = \"visible\";\n    k.go(scene);\n  }\n}\n\nexport function setGameData(key: string, data: any) {\n  k.setData(key, data);\n}\n\nexport function getGameData(key: string): any {\n  return k.getData(key);\n}\n","export const TOKEN_SYMBOL = \"TAG\";\nexport const CONTRACT_ADDRESS = \"terra1xpaa6t64jjmphrtat4c7sqand8aefsphwvx3lr\";\n","import React, {useState, useEffect, useCallback, useMemo} from \"react\"\nimport {\n  CreateTxFailed,\n  Timeout,\n  TxFailed,\n  TxResult,\n  TxUnspecifiedError,\n  useConnectedWallet,\n  UserDenied,\n} from '@terra-money/wallet-provider';\nimport {hideGame} from \"../game\";\nimport {Coin, Coins, CreateTxOptions, Denom, LCDClient, MsgExecuteContract, StdFee} from \"@terra-money/terra.js\";\nimport {CONTRACT_ADDRESS} from \"../components/constants\";\n\nenum MintStatus {\n  NotInProgress = '',\n  InProgress = 'in progress',\n  Completed = 'completed',\n  Error = 'error'\n};\n\nexport default function Admin() {\n  useEffect(() => { hideGame(); }, []);\n  const connectedWallet = useConnectedWallet();\n  const lcd = useMemo(() => {\n    if (!connectedWallet) {\n      return null;\n    }\n    // const gas_response = await fetch(\n    //   \"https://fcd.terra.dev/v1/txs/gas_prices\",\n    // );\n    // const gas_json = await gas_response.json();\n    return new LCDClient({\n      URL: connectedWallet.network.lcd,\n      chainID: connectedWallet.network.chainID,\n      // gasPrices: {\n      //   uusd: gas_json.uusd,\n      // },\n      // gasAdjustment: \"1.4\",\n    });\n  }, [connectedWallet]);\n\n  const [mintStatus, setMintStatus] = useState<MintStatus>(MintStatus.NotInProgress);\n  const [mintAmount, setMintAmount] = useState<string>(\"0\");\n  const executeMint = () => {\n    if (!lcd || !connectedWallet || mintStatus == MintStatus.InProgress || mintAmount === \"0\") {\n      return;\n    }\n\n    // const coins = Coins.fromString(\"100000uluna\");\n    const executeMsg = new MsgExecuteContract(\n      connectedWallet.walletAddress,\n      CONTRACT_ADDRESS,\n      {\n        mint: {\n          amount: mintAmount,\n        },\n      },\n      { uluna: 50000 },\n    );\n    // const estimatedFee = await lcd.tx.estimateFee(\n    //   connectedWallet.walletAddress,\n    //   [executeMsg],\n    // );\n    // console.log(estimatedFee);\n\n    const tx: CreateTxOptions = {\n      msgs: [executeMsg],\n      /*\n       StdFee(requested_gas, fee). requested gas is like a ceiling gas you'd want to\n       spend for this tx specifically, and fee is how much you want to spend for this\n       gas ceiling.\n\n       So for example if your contract execution were to take 300,000 gas, it's ok as\n       long as gas_requested is whatever above 300,000. For fee -- as long as you are\n       willing to spend more than min gas price per unit gas it's fine.\n      */\n      fee: new StdFee(1000000, { uluna: 200000 }),\n    };\n    connectedWallet.post(tx).then(nextTxResult => {\n      console.log(nextTxResult);\n    }).catch((error: unknown) => {\n      console.error(error);\n      setMintStatus(MintStatus.Error);\n    });\n  };\n  const executeTransfer = () => {\n    if (!lcd || !connectedWallet) {\n      return;\n    }\n    const executeMsg = new MsgExecuteContract(\n      connectedWallet.walletAddress,\n      CONTRACT_ADDRESS,\n      {\n        transfer: {\n          amount: \"5000\",\n          recipient: \"terra18d2448f244wf9f7l69w66nq0ffvh8j989rn85l\",\n        }\n      },\n      { uluna: 50000 },\n    );\n    const tx: CreateTxOptions = {\n      msgs: [executeMsg],\n      fee: new StdFee(1000000, { uluna: 200000 }),\n    };\n    connectedWallet.post(tx).then(nextTxResult => {\n      console.log(nextTxResult);\n    }).catch(error => {\n      console.error(error);\n    });\n  };\n  return (<div>\n    <section>\n      <h3>Mint</h3>\n      <p><input type=\"text\" value={mintAmount} onChange={e => {\n        setMintAmount(e.target.value);\n      }}/></p>\n      <p><button onClick={() => executeMint()} disabled={mintStatus == MintStatus.InProgress}>Mint</button> {mintStatus}</p>\n    </section>\n    <section>\n      <p><button onClick={() => executeTransfer()}>Transfer</button></p>\n    </section>\n  </div>);\n}\n","import { useWallet, WalletStatus } from '@terra-money/wallet-provider';\nimport React from 'react';\n\nexport function ConnectSample() {\n  const {\n    status,\n    network,\n    wallets,\n    availableConnectTypes,\n    availableInstallTypes,\n    connect,\n    install,\n    disconnect,\n  } = useWallet();\n\n  return (\n    <div>\n      <h1>Connect Sample</h1>\n      <section>\n        <pre>\n          {JSON.stringify(\n            {\n              status,\n              network,\n              wallets,\n              availableConnectTypes,\n              availableInstallTypes,\n            },\n            null,\n            2,\n          )}\n        </pre>\n      </section>\n\n      <footer>\n        {status === WalletStatus.WALLET_NOT_CONNECTED && (\n          <>\n            {availableInstallTypes.map((connectType) => (\n              <button\n                key={'install-' + connectType}\n                onClick={() => install(connectType)}\n              >\n                Install {connectType}\n              </button>\n            ))}\n            {availableConnectTypes.map((connectType) => (\n              <button\n                key={'connect-' + connectType}\n                onClick={() => connect(connectType)}\n              >\n                Connect {connectType}\n              </button>\n            ))}\n          </>\n        )}\n        {status === WalletStatus.WALLET_CONNECTED && (\n          <button onClick={() => disconnect()}>Disconnect</button>\n        )}\n      </footer>\n    </div>\n  );\n}\n","import { LCDClient } from '@terra-money/terra.js';\nimport { useConnectedWallet } from '@terra-money/wallet-provider';\nimport React, { useEffect, useMemo, useState } from 'react';\n\nexport function QuerySample() {\n  const connectedWallet = useConnectedWallet();\n\n  const [bank, setBank] = useState<null | string>();\n\n  const lcd = useMemo(() => {\n    if (!connectedWallet) {\n      return null;\n    }\n\n    return new LCDClient({\n      URL: connectedWallet.network.lcd,\n      chainID: connectedWallet.network.chainID,\n    });\n  }, [connectedWallet]);\n\n  useEffect(() => {\n    if (connectedWallet && lcd) {\n      lcd.bank.balance(connectedWallet.walletAddress).then((coins) => {\n        setBank(coins.toString());\n      });\n    } else {\n      setBank(null);\n    }\n  }, [connectedWallet, lcd]);\n\n  return (\n    <div>\n      <h1>Query Sample</h1>\n      {bank && <pre>{bank}</pre>}\n      {!connectedWallet && <p>Wallet not connected!</p>}\n    </div>\n  );\n}\n","import { MsgSend, StdFee } from '@terra-money/terra.js';\nimport {\n  CreateTxFailed,\n  Timeout,\n  TxFailed,\n  TxResult,\n  TxUnspecifiedError,\n  useConnectedWallet,\n  UserDenied,\n} from '@terra-money/wallet-provider';\nimport React, { useCallback, useState } from 'react';\n\nconst toAddress = 'terra12hnhh5vtyg5juqnzm43970nh4fw42pt27nw9g9';\n\nexport function TxSample() {\n  const [txResult, setTxResult] = useState<TxResult | null>(null);\n  const [txError, setTxError] = useState<string | null>(null);\n\n  const connectedWallet = useConnectedWallet();\n\n  const send = useCallback(() => {\n    if (!connectedWallet) {\n      return;\n    }\n\n    if (!connectedWallet.network.chainID.startsWith('bombay')) {\n      alert(`Please only execute this example on Testnet`);\n      return;\n    }\n\n    setTxResult(null);\n\n    connectedWallet\n      .post({\n        fee: new StdFee(1000000, '200000uusd'),\n        msgs: [\n          new MsgSend(connectedWallet.walletAddress, toAddress, {\n            uusd: 1000000,\n          }),\n        ],\n      })\n      .then((nextTxResult: TxResult) => {\n        console.log(nextTxResult);\n        setTxResult(nextTxResult);\n      })\n      .catch((error: unknown) => {\n        if (error instanceof UserDenied) {\n          setTxError('User Denied');\n        } else if (error instanceof CreateTxFailed) {\n          setTxError('Create Tx Failed: ' + error.message);\n        } else if (error instanceof TxFailed) {\n          setTxError('Tx Failed: ' + error.message);\n        } else if (error instanceof Timeout) {\n          setTxError('Timeout');\n        } else if (error instanceof TxUnspecifiedError) {\n          setTxError('Unspecified Error: ' + error.message);\n        } else {\n          setTxError(\n            'Unknown Error: ' +\n              (error instanceof Error ? error.message : String(error)),\n          );\n        }\n      });\n  }, [connectedWallet]);\n\n  return (\n    <div>\n      <h1>Tx Sample</h1>\n      {connectedWallet?.availablePost && !txResult && !txError && (\n        <button onClick={send}>Send 1USD to {toAddress}</button>\n      )}\n      {txResult && (\n        <>\n          <pre>{JSON.stringify(txResult, null, 2)}</pre>\n          <button onClick={() => setTxResult(null)}>Clear Tx Result</button>\n        </>\n      )}\n      {txError && (\n        <>\n          <pre>{txError}</pre>\n          <button onClick={() => setTxError(null)}>Clear Tx Error</button>\n        </>\n      )}\n      {!connectedWallet && <p>Wallet not connected!</p>}\n      {connectedWallet && !connectedWallet.availablePost && (\n        <p>Can not post Tx</p>\n      )}\n    </div>\n  );\n}\n","import { GAME_TITLE } from \"../game/constants\";\n\nexport default function About() {\n  return (\n    <h2>About {GAME_TITLE}</h2>\n  );\n}\n","import React from \"react\";\n\nexport default function HowToPlay() {\n  return (<div>\n    <h2>How to Play</h2>\n    <p>1. Download the Terra Station wallet for your browser</p>\n    <p>2. Create your wallet</p>\n    <p>3. Connect your wallet</p>\n  </div>);\n}\n","import React, {useEffect} from \"react\";\nimport { ConnectSample } from 'components/ConnectSample';\nimport { QuerySample } from 'components/QuerySample';\nimport { TxSample } from 'components/TxSample';\nimport {hideGame} from \"../game\";\nimport About from \"../components/About\";\nimport HowToPlay from \"../components/HowToPlay\";\n\nexport default function Main() {\n  useEffect(() => { hideGame(); }, []);\n  return (\n    <div>\n      <h1>Paws in the Park</h1>\n      <HowToPlay />\n      <About />\n      <div>\n        <ConnectSample />\n        <QuerySample />\n        <TxSample />\n      </div>\n    </div>\n  );\n}\n","import React, {useEffect, useMemo, useState} from \"react\";\nimport {hideGame} from \"../game\";\nimport {BalanceResponse, MarketListing, MarketListingsResponse} from \"../types\";\nimport {useConnectedWallet} from \"@terra-money/wallet-provider\";\nimport {CreateTxOptions, LCDClient, MsgExecuteContract, StdFee} from \"@terra-money/terra.js\";\nimport {CONTRACT_ADDRESS} from \"../components/constants\";\n\nexport default function Market() {\n  useEffect(() => { hideGame(); }, []);\n\n  const connectedWallet = useConnectedWallet();\n  const lcd = useMemo(() => {\n    if (!connectedWallet) {\n      return null;\n    }\n    return new LCDClient({\n      URL: connectedWallet.network.lcd,\n      chainID: connectedWallet.network.chainID,\n    })\n  }, [connectedWallet]);\n  const [listings, setListings] = useState<MarketListing[]>([]);\n  useEffect(() => {\n    if (connectedWallet && lcd) {\n      lcd.wasm.contractQuery<MarketListingsResponse>(CONTRACT_ADDRESS, {\n        \"market_listings\": {},\n      }).then(result => {\n        setListings(result.listings);\n      }).catch(error => {\n        console.error(error);\n        setListings([]);\n      })\n    } else {\n      setListings([]);\n    }\n  }, [connectedWallet, lcd]);\n\n  const executeBuyDogOnMarket = (dog_id: string, price_in_uusd: string) => {\n    if (!connectedWallet || !lcd) {\n      return;\n    }\n    const executeMsg = new MsgExecuteContract(\n      connectedWallet.walletAddress,\n      CONTRACT_ADDRESS,\n      {\n        buy_dog_on_market: {\n          dog_id: dog_id,\n        },\n      },\n      { uusd: price_in_uusd },\n    );\n    const tx: CreateTxOptions = {\n      msgs: [executeMsg],\n      fee: new StdFee(1000000, { uusd: 200000 }),\n    };\n    connectedWallet.post(tx).then(nextTxResult => {\n      console.log(`Dog bought for ${price_in_uusd}`);\n    }).catch((error: unknown) => {\n      console.error(error);\n    });\n  }\n\n  return (<section>\n    <header>\n      <h3>Market Listings</h3>\n    </header>\n    <section>\n      {listings?.map(listing =>\n        <div key={listing.id}>\n          <div>\n            <div>Dog #{listing.id}</div>\n            <div>Listed by {listing.listed_by_address}</div>\n          </div>\n          <div>\n            <button onClick={() => executeBuyDogOnMarket(listing.id, listing.price.amount)}>\n              Buy this dog for {parseFloat(listing.price.amount) / 1000000.0} USDT\n            </button>\n          </div>\n        </div>\n      )}\n    </section>\n  </section>);\n}\n","import React, {useEffect, useMemo, useState} from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport {hideGame, setGameData, showGame} from \"../game\";\nimport {useConnectedWallet} from \"@terra-money/wallet-provider\";\nimport {CreateTxOptions, LCDClient, MsgExecuteContract, StdFee} from \"@terra-money/terra.js\";\nimport {Accessory, Dog, InventoryResponse} from \"../types\";\nimport {CONTRACT_ADDRESS} from \"../components/constants\";\n\nexport default function DogDetail() {\n  useEffect(() => { hideGame() }, []);\n  let { dogId } = useParams<{ dogId: string }>();\n  const [dog, setDog] = useState<Dog|null>(null);\n  const [accessories, setAccessories] = useState<Accessory[]>();\n  useEffect(() => {\n    if (dog && accessories) {\n      setGameData(\"dog\", dog);\n      setGameData(\"accessories\", accessories);\n      showGame(\"detail\");\n    } else {\n      setGameData(\"dog\", null);\n      setGameData(\"accessories\", null);\n      hideGame();\n    }\n  }, [dog, accessories]);\n\n  const connectedWallet = useConnectedWallet();\n  const lcd = useMemo(() => {\n    if (!connectedWallet) {\n      return null;\n    }\n    return new LCDClient({\n      URL: connectedWallet.network.lcd,\n      chainID: connectedWallet.network.chainID,\n    })\n  }, [connectedWallet]);\n  useEffect(() => {\n    if (connectedWallet && lcd) {\n      lcd.wasm.contractQuery<InventoryResponse>(CONTRACT_ADDRESS, {\n        \"inventory\": {\n          \"address\": connectedWallet.walletAddress,\n        },\n      }).then(result => {\n        setDog(result.dogs.find(dog => dog.id === dogId) || null);\n        setAccessories(result.accessories);\n      });\n    } else {\n      setDog(null);\n      setAccessories([]);\n    }\n  }, [connectedWallet, lcd]);\n  return (<></>);\n}\n","export const ACCESSORY_IMAGE: { [index: string]: string } = {\n  \"martini glass\": \"assets/accessory-martini.png\",\n  \"sparkle\": \"assets/accessory-sparkle.png\",\n  \"star\": \"assets/accessory-rainbow-star.png\",\n};\n\nexport const DOG_IMAGE: { [index: number]: string } = {\n  0: \"assets/dog01.png\",\n  1: \"assets/dog02.png\",\n  2: \"assets/dog06.png\",\n  3: \"assets/dog04.png\",\n  4: \"assets/dog05.png\",\n  5: \"assets/dog07.png\",\n  6: \"assets/dog03.png\",\n};\n\nexport const DOG_CLASS_NAME: { [index: number]: string } = {\n  0: \"Huggable\",\n  1: \"Curlytail\",\n  2: \"Pointer\",\n  3: \"Margaritaville\",\n  4: \"Spacedog\",\n  5: \"Friendo\",\n  6: \"Woofington\",\n};\n\nexport const DOG_ATTR_NAME: { [index: number]: string } = {\n  0: \"Floofiness\",\n  1: \"Curiosity\",\n  2: \"Agility\",\n  3: \"Squirrel Factor\",\n};\n","import React, {useEffect, useMemo, useState} from \"react\";\nimport {hideGame} from \"../game\";\nimport {Accessory, Dog, InventoryResponse} from \"../types\";\nimport {CONTRACT_ADDRESS} from \"../components/constants\";\nimport {useConnectedWallet} from \"@terra-money/wallet-provider\";\nimport {CreateTxOptions, LCDClient, MsgExecuteContract, StdFee} from \"@terra-money/terra.js\";\nimport './DogSquad.css';\nimport {ACCESSORY_IMAGE, DOG_ATTR_NAME, DOG_CLASS_NAME, DOG_IMAGE} from \"../constants\";\nimport {Link} from \"react-router-dom\";\n\nexport default function DogSquad() {\n  useEffect(() => { hideGame() }, []);\n\n  const connectedWallet = useConnectedWallet();\n  const lcd = useMemo(() => {\n    if (!connectedWallet) {\n      return null;\n    }\n    return new LCDClient({\n      URL: connectedWallet.network.lcd,\n      chainID: connectedWallet.network.chainID,\n    })\n  }, [connectedWallet]);\n  useEffect(() => {\n    if (connectedWallet && lcd) {\n      lcd.wasm.contractQuery<InventoryResponse>(CONTRACT_ADDRESS, {\n        \"inventory\": {\n          \"address\": connectedWallet.walletAddress,\n        },\n      }).then(result => {\n        setDogs(result.dogs);\n        setAccessories(result.accessories);\n      });\n    } else {\n      setDogs([]);\n      setAccessories([]);\n    }\n  }, [connectedWallet, lcd]);\n\n  const executeSellDogOnMarket = (dog_id: string, price_in_uusd: string) => {\n    if (!connectedWallet || !lcd) {\n      return;\n    }\n    const executeMsg = new MsgExecuteContract(\n      connectedWallet.walletAddress,\n      CONTRACT_ADDRESS,\n      {\n        sell_dog_on_market: {\n          dog_id: dog_id,\n          price: price_in_uusd,\n        },\n      },\n      { uusd: 1 },\n    );\n    const tx: CreateTxOptions = {\n      msgs: [executeMsg],\n      fee: new StdFee(1000000, { uusd: 200000 }),\n    };\n    connectedWallet.post(tx).then(nextTxResult => {\n      console.log(\"Dog listed for sale\");\n    }).catch((error: unknown) => {\n      console.error(error);\n    });\n  }\n\n  const [dogs, setDogs] = useState<Dog[]>();\n  const [accessories, setAccessories] = useState<Accessory[]>();\n  return (<div className=\"screen-dog-squad\">\n    <section className=\"dog-list\">\n      <header>\n        <h3>{dogs?.length} Dogs</h3>\n      </header>\n      <section className=\"dog-items\">\n        {dogs?.map(dog =>\n          <div className=\"dog-item\" key={dog.id}>\n            <header>\n              <Link to={`/dog/${dog.id}`}>\n                <h4>{dog.name}</h4>\n                <h5>{DOG_CLASS_NAME[dog.class]}</h5>\n              </Link>\n            </header>\n            <section>\n              <div>\n                <img src={DOG_IMAGE[dog.class]} />\n              </div>\n              <div>\n                <div>{DOG_ATTR_NAME[0]}: {dog.attr1}</div>\n                <div>{DOG_ATTR_NAME[1]}: {dog.attr2}</div>\n                <div>{DOG_ATTR_NAME[2]}: {dog.attr3}</div>\n                <div>{DOG_ATTR_NAME[3]}: {dog.attr4}</div>\n              </div>\n            </section>\n            <footer>\n              <button onClick={() => executeSellDogOnMarket(dog.id, \"1000000\")}>\n                Sell for 1 USDT\n              </button>\n              <button onClick={() => executeSellDogOnMarket(dog.id, \"5000000\")}>\n                Sell for 5 USDT\n              </button>\n            </footer>\n          </div>\n        )}\n      </section>\n    </section>\n    <section className=\"accessory-list\">\n      <header>\n        <h3>{accessories?.length} Accessories</h3>\n      </header>\n      <section className=\"accessory-items\">\n        {accessories?.map(accessory =>\n          <div className=\"accessory-item\" key={accessory.id}>\n            <img src={ACCESSORY_IMAGE[accessory.name]} />\n            {accessory.name}\n          </div>\n        )}\n      </section>\n    </section>\n  </div>);\n}\n","import React, {useEffect, useMemo} from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport {setGameData, showGame} from \"../game\";\nimport {useConnectedWallet} from \"@terra-money/wallet-provider\";\nimport {CreateTxOptions, LCDClient, MsgExecuteContract, StdFee} from \"@terra-money/terra.js\";\nimport {InventoryResponse} from \"../types\";\nimport {CONTRACT_ADDRESS} from \"../components/constants\";\n\nexport default function Slots() {\n  useEffect(() => {\n    showGame(\"slots\");\n  }, []);\n\n  const connectedWallet = useConnectedWallet();\n  const lcd = useMemo(() => {\n    if (!connectedWallet) {\n      return null;\n    }\n    return new LCDClient({\n      URL: connectedWallet.network.lcd,\n      chainID: connectedWallet.network.chainID,\n    })\n  }, [connectedWallet]);\n\n  useEffect(() => {\n    // @ts-ignore\n    document[\"_pawsinthepark_execute_spin\"] = function(callback) {\n      if (!connectedWallet || !lcd) {\n        return;\n      }\n      const executeMsg = new MsgExecuteContract(\n        connectedWallet.walletAddress,\n        CONTRACT_ADDRESS,\n        {\n          spin_the_wheel: {},\n        },\n        { uusd: 1000000 },\n      );\n      const tx: CreateTxOptions = {\n        msgs: [executeMsg],\n        fee: new StdFee(1000000, { uusd: 200000 }),\n      };\n      connectedWallet.post(tx).then(nextTxResult => {\n        callback(); // TODO: pass the prize info on\n      }).catch((error: unknown) => {\n        callback(); // TODO: pass the error on\n        console.error(error);\n      });\n    };\n  }, [connectedWallet, lcd]);\n  return (<></>);\n}\n","import React, {useEffect, useMemo, useState} from \"react\";\nimport {LCDClient} from \"@terra-money/terra.js\";\nimport {useConnectedWallet} from \"@terra-money/wallet-provider\";\n\nimport {CONTRACT_ADDRESS, TOKEN_SYMBOL} from \"./constants\";\nimport {BalanceResponse} from \"../types\";\n\nexport function TokenBalance() {\n  const connectedWallet = useConnectedWallet();\n  const lcd = useMemo(() => {\n    if (!connectedWallet) {\n      return null;\n    }\n    return new LCDClient({\n      URL: connectedWallet.network.lcd,\n      chainID: connectedWallet.network.chainID,\n    })\n  }, [connectedWallet]);\n  const [balance, setBalance] = useState<null | string>();\n  const [ustBalance, setUstBalance] = useState<null | string>();\n  useEffect(() => {\n    if (connectedWallet && lcd) {\n      lcd.wasm.contractQuery<BalanceResponse>(CONTRACT_ADDRESS, {\n        \"balance\": {\n          \"address\": connectedWallet.walletAddress,\n        },\n      }).then(result => {\n        setBalance(result.balance);\n      });\n      lcd.bank.balance(connectedWallet.walletAddress).then(coins => {\n        setUstBalance(coins.get(\"uusd\")?.toString());\n      });\n    } else {\n      setBalance(\"0\");\n    }\n  }, [connectedWallet, lcd]);\n  return (<div>\n    <div>{balance} {TOKEN_SYMBOL}</div>\n    <div>{ustBalance}</div>\n  </div>);\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { NetworkInfo, WalletProvider } from '@terra-money/wallet-provider';\n\nimport Admin from 'screens/Admin';\nimport Main from 'screens/Main';\nimport Market from 'screens/Market';\nimport DogDetail from \"screens/DogDetail\";\nimport DogSquad from \"screens/DogSquad\";\nimport Slots from \"screens/Slots\";\nimport './style.css';\nimport './game';\nimport {TokenBalance} from \"components/TokenBalance\";\n\nconst mainnet = {\n  name: 'mainnet',\n  chainID: 'columbus-4',\n  lcd: 'https://lcd.terra.dev',\n};\n\nconst testnet = {\n  name: 'bombay',\n  chainID: 'bombay-10',\n  lcd: 'https://bombay-lcd.terra.dev',\n};\n\nconst walletConnectChainIds: Record<number, NetworkInfo> = {\n  0: testnet,\n  1: mainnet,\n};\n\nReactDOM.render(\n  <WalletProvider\n    defaultNetwork={testnet}\n    walletConnectChainIds={walletConnectChainIds}\n  >\n    <Router>\n      <div id=\"nav\">\n        <Link to=\"/squad\">Dog Squad</Link>\n        <Link to=\"/market\">Market</Link>\n        <Link to=\"/play\">Play the Game</Link>\n        <Link to=\"/\">About</Link>\n        <TokenBalance />\n      </div>\n      <Switch>\n        <Route path=\"/squad\">\n          <DogSquad />\n        </Route>\n        <Route path=\"/dog/:dogId\">\n          <DogDetail />\n        </Route>\n        <Route path=\"/market\">\n          <Market />\n        </Route>\n        <Route path=\"/play\">\n          <Slots />\n        </Route>\n        <Route path=\"/admin\">\n          <Admin />\n        </Route>\n        <Route path=\"/\">\n          <Main />\n        </Route>\n      </Switch>\n    </Router>\n  </WalletProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}